
LEDmine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000144  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002ec  080002f4  000102f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002ec  080002ec  000102f4  2**0
                  CONTENTS
  4 .ARM          00000000  080002ec  080002ec  000102f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002ec  080002f4  000102f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002ec  080002ec  000102ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002f0  080002f0  000102f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002f4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002f4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000000f2  00000000  00000000  00010324  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000080  00000000  00000000  00010416  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  000104e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000efc  00000000  00000000  00010510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000040c  00000000  00000000  0001140c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003b0e  00000000  00000000  00011818  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00015326  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  000153a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080002d4 	.word	0x080002d4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080002d4 	.word	0x080002d4

080001e8 <main>:
 ******************************************************************************
 */
#include <stdint.h>

int main(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
/*These are pointers pointing to the respective peripheral memory-addresses(address + offset) needed for  our
 * small project, i.e to light our LED on the stm32f407vet black board, this code should work on your discovery or nucleo board.
 * this is not the most efficient and professional to get our task done. But a peep on how bit-wise operations are relevant in
 * embedded systems, we'll use bitwise-shift operations next time.
 */
	uint32_t *pAddress_RCC = (uint32_t*)0x40023830;
 80001ee:	4b0f      	ldr	r3, [pc, #60]	; (800022c <main+0x44>)
 80001f0:	60fb      	str	r3, [r7, #12]
	uint32_t *pAddress_GPIOC_portModeReg = (uint32_t*)0x40020800;
 80001f2:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <main+0x48>)
 80001f4:	60bb      	str	r3, [r7, #8]
	uint32_t *pAddress_GPIOC_portOutputReg = (uint32_t*)0x40020814;
 80001f6:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <main+0x4c>)
 80001f8:	607b      	str	r3, [r7, #4]

//	enabling the clock for GPIO port C
/*This is actually de-referencing the the pointer(pAddress_RCC), so we can write b0100(Hex: 0x04) to the pAddress_RCC register
 * with this we'll succeed in "setting" the 2nd bit-position high, thus enabling portC 's clock.
 */
	*pAddress_RCC |= 0x04;
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f043 0204 	orr.w	r2, r3, #4
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	601a      	str	r2, [r3, #0]
// clearing the port mode register
/*Here we use a mask value, to clear the bit-postions needed in the register for our project. This register (pAddress_GPIOC_portModeReg)
 * handles the mode of the gpio pin(output, input, analog..). Since we want an output mode, we first clear the required bit-positions
 * needed(1:0), so with the mask value, we zero out the 0th and 1st bit positions in the register.
 */
	*pAddress_GPIOC_portModeReg &=  0xFFFFFFFC;
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f023 0203 	bic.w	r2, r3, #3
 800020e:	68bb      	ldr	r3, [r7, #8]
 8000210:	601a      	str	r2, [r3, #0]

// setting the port mode register
/*We set our pin as an output here by writing (01) to the 1st and 0th bit-positions in the register(pAddress_GPIOC_portModeReg).
 * Quick note: stm32f4 mcu has 32bit registers
 */
	*pAddress_GPIOC_portModeReg |= 0x00000001;
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 0201 	orr.w	r2, r3, #1
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	601a      	str	r2, [r3, #0]

//	setting pin 0 of port C high
/*we are just setting PC0 on the board high
 *
 */
	*pAddress_GPIOC_portOutputReg |= 0x01;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0201 	orr.w	r2, r3, #1
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]

    /* Loop forever */
	while(1);
 800022a:	e7fe      	b.n	800022a <main+0x42>
 800022c:	40023830 	.word	0x40023830
 8000230:	40020800 	.word	0x40020800
 8000234:	40020814 	.word	0x40020814

08000238 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000238:	480d      	ldr	r0, [pc, #52]	; (8000270 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800023a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800023c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000240:	480c      	ldr	r0, [pc, #48]	; (8000274 <LoopForever+0x6>)
  ldr r1, =_edata
 8000242:	490d      	ldr	r1, [pc, #52]	; (8000278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000244:	4a0d      	ldr	r2, [pc, #52]	; (800027c <LoopForever+0xe>)
  movs r3, #0
 8000246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000248:	e002      	b.n	8000250 <LoopCopyDataInit>

0800024a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800024a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800024c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800024e:	3304      	adds	r3, #4

08000250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000254:	d3f9      	bcc.n	800024a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000256:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000258:	4c0a      	ldr	r4, [pc, #40]	; (8000284 <LoopForever+0x16>)
  movs r3, #0
 800025a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800025c:	e001      	b.n	8000262 <LoopFillZerobss>

0800025e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800025e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000260:	3204      	adds	r2, #4

08000262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000264:	d3fb      	bcc.n	800025e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000266:	f000 f811 	bl	800028c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800026a:	f7ff ffbd 	bl	80001e8 <main>

0800026e <LoopForever>:

LoopForever:
    b LoopForever
 800026e:	e7fe      	b.n	800026e <LoopForever>
  ldr   r0, =_estack
 8000270:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000278:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800027c:	080002f4 	.word	0x080002f4
  ldr r2, =_sbss
 8000280:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000284:	2000001c 	.word	0x2000001c

08000288 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000288:	e7fe      	b.n	8000288 <ADC_IRQHandler>
	...

0800028c <__libc_init_array>:
 800028c:	b570      	push	{r4, r5, r6, lr}
 800028e:	4e0d      	ldr	r6, [pc, #52]	; (80002c4 <__libc_init_array+0x38>)
 8000290:	4c0d      	ldr	r4, [pc, #52]	; (80002c8 <__libc_init_array+0x3c>)
 8000292:	1ba4      	subs	r4, r4, r6
 8000294:	10a4      	asrs	r4, r4, #2
 8000296:	2500      	movs	r5, #0
 8000298:	42a5      	cmp	r5, r4
 800029a:	d109      	bne.n	80002b0 <__libc_init_array+0x24>
 800029c:	4e0b      	ldr	r6, [pc, #44]	; (80002cc <__libc_init_array+0x40>)
 800029e:	4c0c      	ldr	r4, [pc, #48]	; (80002d0 <__libc_init_array+0x44>)
 80002a0:	f000 f818 	bl	80002d4 <_init>
 80002a4:	1ba4      	subs	r4, r4, r6
 80002a6:	10a4      	asrs	r4, r4, #2
 80002a8:	2500      	movs	r5, #0
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d105      	bne.n	80002ba <__libc_init_array+0x2e>
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002b4:	4798      	blx	r3
 80002b6:	3501      	adds	r5, #1
 80002b8:	e7ee      	b.n	8000298 <__libc_init_array+0xc>
 80002ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002be:	4798      	blx	r3
 80002c0:	3501      	adds	r5, #1
 80002c2:	e7f2      	b.n	80002aa <__libc_init_array+0x1e>
 80002c4:	080002ec 	.word	0x080002ec
 80002c8:	080002ec 	.word	0x080002ec
 80002cc:	080002ec 	.word	0x080002ec
 80002d0:	080002f0 	.word	0x080002f0

080002d4 <_init>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	bf00      	nop
 80002d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002da:	bc08      	pop	{r3}
 80002dc:	469e      	mov	lr, r3
 80002de:	4770      	bx	lr

080002e0 <_fini>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr
